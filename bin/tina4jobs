#!/usr/bin/env php
<?php

$replacePath = $argv[0]; //used to figure out where we're running
global $rootPath;
global $session; //store things here you want to reuse
$session = [];

foreach (get_included_files() as $id => $file) {
    if (strpos($file, "vendor" . DIRECTORY_SEPARATOR . "autoload.php")) {
        $rootPath = str_ireplace("vendor" . DIRECTORY_SEPARATOR . "autoload.php", "", $file);
        break;
    }
}

if (empty($rootPath)) {
    $rootPath = str_replace("vendor" . DIRECTORY_SEPARATOR . "tina4components" . DIRECTORY_SEPARATOR . "tina4jobsmodule" . DIRECTORY_SEPARATOR . "bin" . DIRECTORY_SEPARATOR . "tina4jobs", "", __FILE__);
    $rootPath = str_replace("bin" . DIRECTORY_SEPARATOR . "tina4jobs", "", $rootPath);
}

require_once "{$rootPath}vendor/autoload.php";
//require_once "{$rootPath}TinaJob/Tina4Queue/Tina4JobFactory.php";

define("TINA4_SUPPRESS", true);

try {
    // Initialize the job queue using the factory, which chooses the driver based on config
    $jobQueue = Tina4Jobs\Tina4JobFactory::createQueueDriver();

    echo "Starting job processor...\n";

    // Flag to manage graceful shutdown
    $shouldStop = false;

    // Register signal handlers for graceful shutdown
    if (function_exists('pcntl_signal')) {
        pcntl_signal(SIGTERM, function () use (&$shouldStop) {
            echo "Received shutdown signal, stopping...\n";
            $shouldStop = true;
        });
        pcntl_signal(SIGINT, function () use (&$shouldStop) {
            echo "Received shutdown signal, stopping...\n";
            $shouldStop = true;
        });
    }

    // Start the job processing loop
    while (!$shouldStop) {
        // Dispatch any pending signals
        if (function_exists('pcntl_signal_dispatch')) {
            pcntl_signal_dispatch();
        }

        // Attempt to get the next job in the queue
        $nextJob = $jobQueue->getNextJob();

        if ($nextJob) {
            echo "Processing job:";

            // Process the job here
            // (Include your job processing logic, such as calling specific methods)
            if (get_class($nextJob) !== "__PHP_Incomplete_Class") {
                $nextJob->handle();
            }

            // Mark job as completed (youâ€™ll need to pass the actual job ID)
            if (property_exists($nextJob, 'id')) {
                $jobQueue->markJobCompleted($nextJob->id);
                echo "Job completed: ID " . $nextJob->id . "\n";
            }
        } else {
            // No jobs in the queue, wait before checking again
            echo "No jobs found. Waiting...\n";
        }

        // Sleep for a defined interval before checking for the next job
        sleep(5); // Adjust the sleep time as needed (in seconds)
    }

    echo "Job processor stopped gracefully.\n";

} catch (Exception $e) {
    echo "Error: " . $e->getMessage() . "\n";
}